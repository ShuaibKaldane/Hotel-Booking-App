<% layout('/layouts/boilerplate.ejs') -%>
<body>
  <div class="row mt-5">
    <div class="col-8 offset-3">
      <h3><%= show.title %></h3>
    </div>
    <div class="card col-6 offset-3 show-cards">
      <img
        src="<%= show.image.url %>"
        class="card-img-top show-img"
        alt="image"
      />
      <div class="card-body">
        <br>
        <p><b>Property Owner Name : <%= show.owner.username %></b></p>
        <%= show.description %><br>
        <%= show.price.toLocaleString("en-IN") %><br>
        <%= show.country %><br>
        <%= show.location %><br>
        </p>
      </div>
    </div>
  </div>
  <div class="row mt-4">
  <div class="col-8 offset-2">
    <div id="map" style="height: 400px; border-radius: 10px;"></div>
  </div>
</div>
 
  <% if(currUser && currUser._id.equals(show.owner._id)){ %>
    <div class="col-8 offset-3">
      <a href="/listings/<%= show._id %>/edit" class="btn btn-primary add me-2">
        Edit Details
      </a>
      
      <form method="POST" action="/listing/<%= show._id %>?_method=DELETE" style="display:inline;">
        <button class="btn btn-danger add">Delete the Listing</button>
      </form>
    </div>
  <% } %>
  <% if(currUser && !show.owner._id.equals(currUser._id)){ %>
    
      <hr>
      <h4 class="text-center">Leave a Review</h4>
      <form action="/listing/<%= show._id %>/reviews" method="post" class="needs-validation" novalidate>
        <div class="col-8 ms-5">
          <fieldset class="starability-slot">
            <input type="radio" id="no-rate" class="input-no-rate" name="review[rating]" value="1" checked aria-label="No rating." />
            <input type="radio" id="first-rate1" name="review[rating]" value="1" />
            <label for="first-rate1" title="Terrible">1 star</label>
            <input type="radio" id="first-rate2" name="review[rating]" value="2" />
            <label for="first-rate2" title="Not good">2 stars</label>
            <input type="radio" id="first-rate3" name="review[rating]" value="3" />
            <label for="first-rate3" title="Average">3 stars</label>
            <input type="radio" id="first-rate4" name="review[rating]" value="4" />
            <label for="first-rate4" title="Very good">4 stars</label>
            <input type="radio" id="first-rate5" name="review[rating]" value="5" />
            <label for="first-rate5" title="Amazing">5 stars</label>
          </fieldset>
        </div>
        <div class="mb-3 ms-5 mx-auto">
          <label for="comment" class="form-label">Comment</label>
          <textarea name="review[comment]" id="comment" cols="10" rows="3" class="form-control w-50" required placeholder="Enter your Experience"></textarea>
          <div class="invalid-feedback">
            Please enter your valuable Experience
          </div>
        </div>
        <button class="btn btn-outline-dark ms-5">Submit</button>
      </form>
    </div>
  <% } %>
  
  <hr>
  <h4 class="text-center mb-3">All Reviews</h4>
  <div class="row">
    <% if(show.review && show.review.length > 0) { %>
      <% show.review.forEach(function(review) { %>
        <div class="col-md-6 mb-3">
          <div class="card review-card h-100">
            <div class="card-body d-flex flex-column">
              <h6 class="card-title rating-stars mb-2">
                <% for(let i = 0; i < review.rating; i++) { %>
                  <span class="text-warning">★</span>
                <% } %>
                <% for(let i = review.rating; i < 5; i++) { %>
                  <span class="text-muted">☆</span>
                <% } %>
                (<%= review.rating %>/5)
              </h6>
              <p class="card-text flex-grow-1"><%= review.comment %></p>
              <% if(review.author) { %>
                <small class="text-muted">By: <%= review.author.username %></small>
              <% } %>
              <small class="review-date mt-auto">Posted on <%= review.createdAt.toLocaleDateString() %></small>
              
              <!-- Delete button - only show to review author or listing owner -->
              <% if(currUser && (currUser._id.equals(review.author._id) || currUser._id.equals(show.owner._id))) { %>
                <form class="mt-2" method="post" action="/listing/<%= show._id %>/reviews/<%= review._id %>?_method=DELETE">
                  <button class="btn btn-danger btn-sm">Delete</button>
                </form>
              <% } %>
            </div>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <div class="col-12">
        <p class="text-muted">No reviews yet. Be the first to leave a review!</p>
      </div>
    <% } %>
  </div>

  <!-- JavaScript for rating slider -->
  <script>
    const ratingSlider = document.getElementById('rating');
    const ratingValue = document.getElementById('ratingValue');
    
    if(ratingSlider && ratingValue) {
      ratingSlider.addEventListener('input', function() {
        ratingValue.textContent = this.value;
      });
    }
  </script>
  <!-- Map Script -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    try {
      // Initialize variables from EJS
      const location = '<%= show.location %>';
      const country = '<%= show.country %>';
      const title = '<%= show.title %>';
      
      // Initialize the map
      const map = L.map('map').setView([20.5937, 78.9629], 5);
      
      // Add tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
      }).addTo(map);
      
      // Enhanced geocoding function for exact location
      function geocodeLocation() {
        if (!location || !country) {
          console.log('Missing location or country data');
          return;
        }
        
        // Try multiple search queries for better accuracy
        const queries = [
          `${location}, ${country}`,
          `${location}`,
          `${country}, ${location}`
        ];
        
        let foundLocation = null;
        let currentQueryIndex = 0;
        
        function searchNextQuery() {
          if (currentQueryIndex >= queries.length) {
            // No more queries to try, show fallback
            showFallbackLocation();
            return;
          }
          
          const query = queries[currentQueryIndex];
          console.log(`Searching for: ${query}`);
          
          const encodedQuery = encodeURIComponent(query);
          fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodedQuery}&limit=5&addressdetails=1`)
            .then(response => {
              if (!response.ok) {
                console.error('Geocoding API error:', response.status);
                currentQueryIndex++;
                searchNextQuery();
                return;
              }
              return response.json();
            })
            .then(data => {
              if (!data) return;
              
              console.log(`Results for "${query}":`, data);
              
              if (data && data.length > 0) {
                // Find the most relevant result
                foundLocation = data.find(result => {
                  const address = result.display_name.toLowerCase();
                  return address.includes(location.toLowerCase()) && 
                         address.includes(country.toLowerCase());
                }) || data[0]; // Fallback to first result
                
                if (foundLocation) {
                  console.log('Found location:', foundLocation);
                  showLocationOnMap(foundLocation);
                  return;
                }
              }
              
              // Try next query
              currentQueryIndex++;
              searchNextQuery();
            })
            .catch(error => {
              console.error('Error in search:', error);
              currentQueryIndex++;
              searchNextQuery();
            });
        }
        
        function showLocationOnMap(foundLocation) {
          try {
            const lat = parseFloat(foundLocation.lat);
            const lon = parseFloat(foundLocation.lon);
            
            // Validate coordinates
            if (isNaN(lat) || isNaN(lon)) {
              throw new Error('Invalid coordinates received');
            }
            
            console.log(`Setting map to coordinates: ${lat}, ${lon}`);
            
            // Set map view to the exact location
            map.setView([lat, lon], 13);
            
            // Create custom marker icon (optional)
            const customIcon = L.divIcon({
              className: 'custom-marker',
              html: '<i class="fas fa-map-marker-alt" style="color: #dc3545; font-size: 24px;"></i>',
              iconSize: [24, 24],
              iconAnchor: [12, 24]
            });
            
            // Add marker with detailed popup
            const marker = L.marker([lat, lon], { icon: customIcon })
              .addTo(map)
              .bindPopup(`
                <div style="text-align: center;">
                  <h6><strong>${title}</strong></h6>
                  <p><i class="fas fa-map-marker-alt"></i> ${location}</p>
                  <p><i class="fas fa-globe"></i> ${country}</p>
                  <small class="text-muted">${foundLocation.display_name}</small>
                </div>
              `)
              .openPopup();
            
            // Add a circle to show the area
            L.circle([lat, lon], {
              color: '#dc3545',
              fillColor: '#dc3545',
              fillOpacity: 0.1,
              radius: 200
            }).addTo(map);
            
            console.log('Marker placed successfully at exact location');
            
          } catch (error) {
            console.error('Error placing marker:', error);
            showFallbackLocation();
          }
        }
        
        function showFallbackLocation() {
          console.error('Error geocoding location: Location not found in any search');
          
          // Fallback: Show default location with address info
          const fallbackMarker = L.marker([20.5937, 78.9629])
            .addTo(map)
            .bindPopup(`
              <div style="text-align: center;">
                <h6><strong>${title}</strong></h6>
                <p><i class="fas fa-map-marker-alt"></i> ${location}, ${country}</p>
                <p class="text-warning"><i class="fas fa-exclamation-triangle"></i> Exact location not found</p>
                <small class="text-muted">Showing approximate location</small>
              </div>
            `);
          
          // Set view to show India (or adjust based on your target region)
          map.setView([20.5937, 78.9629], 5);
        }
        
        // Start the search
        searchNextQuery();
      }
      
      // Call geocoding function
      geocodeLocation();
      
    } catch (error) {
      console.error('Error initializing map:', error);
    }
  });
</script>
</body>